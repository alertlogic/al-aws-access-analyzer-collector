{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "A stack that sets up Alert Logic custom checks. You will be billed for the AWS resources used if you create a stack from this template. This template requires setting the \"Create IAM resources\" parameter to True.",
    "Parameters": {
        "AccountID": {
            "Description": "Alert Logic Account ID",
            "Type": "String"
        },
        "AccessKeyID": {
            "Description": "API Access Key ID",
            "Type": "String",
            "MinLength": "5"
        },
        "SecretKey": {
            "Description": "API Secret Key",
            "Type": "String",
            "NoEcho": "true",
            "MinLength": "5"
        },
        "AccountDataResidency": {
            "Description": "Account Data Residency",
            "Type": "String",
            "Default": "USA",
            "AllowedValues": [
                "USA",
                "UK",
                "Development"
            ]
        },
        "EventSchedule": {
            "Description": "Frequency of IAM Access Analyzer Findings Polling in minutes.",
            "Type": "Number",
            "Default": "60"
        },
        "FunctionsPrefix": {
            "Description": "Generated Lambda Functions Prefix. All Lambda Functions created by this CloudFormation template will be prefixed with this value followed by '-' and function name. Leave this field empty if you want to use CloudFormation generated Lambda Functions names.",
            "Type": "String"
        },
        "RolePrefix": {
            "Description": "IAM Role Prefix. All IAM Roles created by this CloudFormation template will be prefixed with this value. Leave this field empty if you want to use CloudFormation generated IAM Role names.",
            "Type": "String"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Alert Logic API Parameters"
                    },
                    "Parameters": [
            "AccountID",
                        "AccessKeyID",
                        "SecretKey",
                        "AccountDataResidency"
                    ]
                },
                {
                    "Label": {
                        "default": "Template Configuration"
                    },
                    "Parameters": [
                        "FunctionsPrefix",
                        "RolePrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "AccountID": {
                    "default": "Alert Logic Account ID"
                },
                "AccessKeyID": {
                    "default": "Access Key ID"
                },
                "SecretKey": {
                    "default": "Secret Key"
                },
                "DataResidency": {
                    "default": "Account Data Residency"
                }
            }
        }
    },
    "Mappings": {
        "ToBoolean": {
            "Enable": {
                "Enable": "true",
                "Disable": "false"
            }
        },
        "ApiUrls": {
            "urls": {
                "USA": "api.cloudinsight.alertlogic.com",
                "UK": "api.cloudinsight.alertlogic.co.uk",
                "Development": "api.product.dev.alertlogic.com"
            }
        }
    },
    "Conditions": {
        "HasFunctionsPrefix": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        "",
                        {
                            "Ref": "FunctionsPrefix"
                        }
                    ]
                }
            ]
        },
        "HasRolePrefix": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        "",
                        {
                            "Ref": "RolePrefix"
                        }
                    ]
                }
            ]
        }
    },
    "Resources": {
        "AlAWSAccessAnalyzerCollectorLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "RoleName": {
                    "Fn::If": [
                        "HasRolePrefix",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "RolePrefix"
                                    },
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "AlAWSAccessAnalyzerCollectorRole"
                                ]
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "AlAWSAccessAnalyzerCollectorFunctionPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "AlAWSAccessAnalyzerCollectorFunctionPolicy",
                "Roles": [
                    {
                        "Ref": "AlAWSAccessAnalyzerCollectorLambdaRole"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "access-analyzer:ListFindings",
                                "access-analyzer:ListAnalyzers"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            },
            "DependsOn": [
                "AlAWSAccessAnalyzerCollectorLambdaRole"
            ]
        },
        "CreateAlAWSAccessAnalyzerCollectorFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::If": [
                        "HasFunctionsPrefix",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "FunctionsPrefix"
                                    },
                                    "AlAWSAccessAnalyzerCollector"
                                ]
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Handler": "al_aws_access_analyzer_collector_function.handler",
                "Description": "Alert Logic IAM Access Analyzer Collector.",
                "Environment": {
                    "Variables": {
                        "AccountId": {
                            "Ref": "AccountID"
                        },
                        "AccessKeyId": {
                            "Ref": "AccessKeyID"
                        },
                        "SecretKey": {
                            "Ref": "SecretKey"
                        },
                        "Endpoint": {
                            "Fn::FindInMap": [
                                "ApiUrls",
                                "urls",
                                {
                                    "Ref": "AccountDataResidency"
                                }
                            ]
                        },
                    }
                },
                 "Role": {
                    "Fn::GetAtt": [
                        "AlAWSAccessAnalyzerCollectorLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            ".",
                            [
                                "alertlogic-public-repo",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                "lambda_packages",
                                "PACKAGE_PLACEHOLDER"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.7",
                "Timeout": "900"
            },
            "DependsOn": [
                "AlAWSAccessAnalyzerCollectorFunctionPolicy"
            ]
        },
        "AlAWSAccessAnalyzerCollectorLambdaTrigger": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "ScheduleExpression": {
                    "Fn::Join": [
                        "",
                        [
                            "rate(",
                            {
                                "Ref": "EventSchedule"
                            },
                            " minutes)"
                        ]
                    ]
                },
                "Targets": [
                    {
                        "Id": "AlAWSAccessAnalyzerCollectorLambdaTriggerLambdaTarget",
                        "Arn": {
                            "Fn::GetAtt": [
                                "CreateAlAWSAccessAnalyzerCollectorFunction",
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        },
        "AlAWSAccessAnalyzerCollectorLambdaTriggerPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "Principal": "events.amazonaws.com",
                "FunctionName": {
                    "Ref": "CreateAlAWSAccessAnalyzerCollectorFunction"
                },
                "SourceArn": {
                    "Fn::GetAtt": [
                        "AlAWSAccessAnalyzerCollectorLambdaTrigger",
                        "Arn"
                    ]
                }
            }
        }
    }
}
